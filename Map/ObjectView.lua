-- local PoolManager = require("Module/Mgr/PoolManager");
-- local ObjectView = Class();
-- local PoolKey = "MapObject";
-- local Vector3 = Vector3;
-- local Vector3Up = Vector3.up;
-- local Vector3One = Vector3.one;
-- local Vector3Zero = Vector3.zero;
-- local Quaternion = Quaternion;

-- function ObjectView:Show(info)
-- 	local TerrainCtrl = DoFileUtil.DoFile("Module/Map/Terrain/TerrainCtrl");
-- 	self.mInfo = info;
-- 	self.mPosition = TerrainCtrl:ConvertToWorld(info.x,info.y);
-- 	local totalTime = info.totalTime;
-- 	if totalTime then
-- 		totalTime = tonumber(totalTime);
-- 		local leftTime = tonumber(info.leftTime);
-- 		self:BeginMove(TerrainCtrl:ConvertToWorld(info.tx,info.ty),totalTime-leftTime,totalTime);
-- 	end
-- 	PoolManager:Get(PoolKey,self.mInfo.path,function (go)
-- 		self:OnLoadCompleted(go,self.mInfo);
-- 	end);
-- end

-- function ObjectView:BeginMove(position,current,totalTime)
-- 	-- print("BeginMove----------------------object view",self.mInfo.key);
-- 	self.mFromPosition = self.mPosition;
-- 	self.mCurrent = current;
-- 	self.mTotalTime = totalTime;
-- 	self.mTargetPosition = position;
-- 	if not self.mUpdateMove then
-- 		self.mUpdateMove = function ()self:Move();end
-- 		UpdateBeat:Add(self.mUpdateMove);
-- 	end
-- end

-- function ObjectView:Vector3ToString(v)
-- 	return "("..v.x..","..v.y..","..v.z..")";
-- end

-- function ObjectView:Move()
-- 	local t = self.mCurrent + Time.deltaTime;
-- 	local totalTime = self.mTotalTime;
-- 	local target = self.mTargetPosition;
-- 	local position = Vector3.Lerp(self.mFromPosition,target,t/totalTime);

-- 	self.mPosition = position;
-- 	self.mCurrent = t;

-- 	--print(t,totalTime,self:Vector3ToString(position).."--->"..self:Vector3ToString(self.mTargetPosition));
-- 	local mMoveGo = self.mMoveGo;
-- 	local mNameBox = self.mNameBox;
-- 	if mMoveGo then
-- 		if self.mTransform.gameObject.activeSelf ~= true then self.mTransform.gameObject:SetActive(true) end
-- 		local lrFrom = self.mTransform:Find("Line/Line_1"):GetComponent("MapLineHelper")
-- 		lrFrom:SetLine(self.mFromPosition,self.mPosition)

-- 		local lrTo = self.mTransform:Find("Line/Line_2"):GetComponent("MapLineHelper")
-- 		lrTo:SetLine(self.mFromPosition,self.mTargetPosition)
		
-- 		local dir = target - position;
-- 		dir.y = 0;
-- 		if dir ~= Vector3Zero then
-- 			mMoveGo.rotation = Quaternion.LookRotation(dir,Vector3Up);
-- 		end
-- 		mMoveGo.position = position;
-- 		if self.mInfo.type == 4 then
-- 			self.mMove_0.gameObject:SetActive(self.mCurrent	> 0)
-- 			self.mMove_1.gameObject:SetActive(self.mCurrent	> 1 and self.mInfo.data.rows >= 1)
-- 			self.mMove_2.gameObject:SetActive(self.mCurrent	> 1.5 and self.mInfo.data.rows >= 2)
-- 			self.mMove_3.gameObject:SetActive(self.mCurrent	> 2 and self.mInfo.data.rows >= 3)
-- 			self.mMove_4.gameObject:SetActive(self.mCurrent	> 2.5 and self.mInfo.data.rows >= 4)
-- 		end
-- 		if mNameBox then 
-- 			mNameBox.position = position; 
-- 		end
-- 	end

-- 	if t > totalTime then
-- 		UpdateBeat:Remove(self.mUpdateMove)
-- 		self.mUpdateMove = nil
-- 		MapObjCtrl:RemoveObject(self.mInfo)
-- 	end
-- end

-- local MarchLinePos=
-- {
-- 	[0]={0.1,0,0,0,0},
-- 	[1]={0.3,-0.2,0,0,0},
-- 	[2]={0.5,0,-0.4,0,0},
-- 	[3]={0.7,0.2,-0.2,-0.6,0},
-- 	[4]={0.9,0.4,0,-0.4,-0.8}
-- }

-- function ObjectView:OnLoadCompleted(go,info)
-- 	go.transform:SetParent(MapObjCtrl.GetObjPoint(info.type).transform)
-- 	go.name = info.key--名字设置为key方便调试
-- 	local transform = go.transform;
-- 	transform.position = self.mPosition
-- 	transform.localScale = Vector3One;
-- 	self.mMoveGo = transform:Find("GameObject")
-- 	self.mNameBox = transform:Find("NameBox")
-- 	LH.AddMonoData(transform:Find("GameObject/BoxColloder").gameObject,self.mInfo)	
-- 	go:SetActive(false)
-- 	if info.modePath ~= nil then
-- 		ResMgr.Instance:LoadAsset(info.modePath,
-- 		function(res)
-- 			local temp = UnityEngine.GameObject.Instantiate(res)
-- 			temp.name = "View"
--     		temp.transform:SetParent(self.mMoveGo.transform)
--     		temp.transform.localScale = Vector3.one
--     		temp.transform.localPosition = Vector3.zero
-- 		end)	
-- 	end
-- 	if info.type == 8 then
-- 		transform:Find("F").position = self.mFromPosition
-- 		transform:Find("T").position = self.mTargetPosition
-- 		LH.AddMonoData(transform:Find("F/BoxColloder").gameObject,self.mInfo)	
-- 		LH.AddMonoData(transform:Find("T/BoxColloder").gameObject,self.mInfo)		
-- 		local list = self.mMoveGo:GetComponentsInChildren(typeof(GPUAnimationRole)):ToTable()
-- 		for k, v in ipairs(list) do
-- 			v:Init()
--     		v:Play("move", true, true)
--     	end
--     	if info.modePathF ~= nil then
-- 			ResMgr.Instance:LoadAsset(info.modePathF,
-- 			function(res)
-- 				local temp = UnityEngine.GameObject.Instantiate(res)
-- 				temp.name = "View"
--     			temp.transform:SetParent(transform:Find("F").transform)
--     			temp.transform.localScale = Vector3.one
--     			temp.transform.localPosition = Vector3.zero
-- 			end)
--     	end
--     	if info.modePathT ~= nil then
-- 			ResMgr.Instance:LoadAsset(info.modePathT,
-- 			function(res)
-- 				local temp = UnityEngine.GameObject.Instantiate(res)
-- 				temp.name = "View"
--     			temp.transform:SetParent(transform:Find("T").transform)
--     			temp.transform.localScale = Vector3.one
--     			temp.transform.localPosition = Vector3.zero
-- 			end)
--     	end
--     elseif info.type == 4 then
--     	------------显示行数设置
--     	self.mMove_0 = transform:Find("GameObject/0")
--     	self.mMove_1 = transform:Find("GameObject/1")
--     	self.mMove_2 = transform:Find("GameObject/2")
--     	self.mMove_3 = transform:Find("GameObject/3")
--     	self.mMove_4 = transform:Find("GameObject/4")

--     	self.mMove_0.transform.localPosition = Vector3.New(0,0,MarchLinePos[info.data.rows][1] - MarchLinePos[info.data.rows][1])/2
--     	self.mMove_1.transform.localPosition = Vector3.New(0,0,MarchLinePos[info.data.rows][2] - MarchLinePos[info.data.rows][1])/2
--     	self.mMove_2.transform.localPosition = Vector3.New(0,0,MarchLinePos[info.data.rows][3] - MarchLinePos[info.data.rows][1])/2
--     	self.mMove_3.transform.localPosition = Vector3.New(0,0,MarchLinePos[info.data.rows][4] - MarchLinePos[info.data.rows][1])/2
--     	self.mMove_4.transform.localPosition = Vector3.New(0,0,MarchLinePos[info.data.rows][5] - MarchLinePos[info.data.rows][1])/2
--     	------------动作设置
-- 		local list = self.mMoveGo:GetComponentsInChildren(typeof(GPUAnimationRole)):ToTable()
-- 		for k, v in ipairs(list) do
-- 			v:Init()
--     		v:Play("move", true, true)
--     	end
--     else
-- 		go:SetActive(true);
-- 	end
-- 	self.mTransform = transform;

-- 	local g_go = transform:Find("NameBox/Name") 	if g_go then self:SetName(g_go,self.mInfo) end
-- 	local f_go = transform:Find("F/Name") 			if f_go then self:SetName(f_go,self.mInfo) end
-- 	local t_go = transform:Find("T/Name") 			if t_go then self:SetName(t_go,self.mInfo) end
-- end

-- function ObjectView:Hide()
-- 	local transform = self.mTransform;
-- 	if transform then
-- 		local go = transform.gameObject;
-- 		go:SetActive(false);
-- 		PoolManager:Put(PoolKey,self.mInfo.path,go);
-- 		self.mTransform = nil;
-- 	end
-- 	if self.mUpdateMove then
-- 		UpdateBeat:Remove(self.mUpdateMove);
-- 		self.mUpdateMove = nil;
-- 	end
-- 	if self.mUpdateBuildTime then
-- 		UpdateBeat:Remove(self.mUpdateBuildTime);
-- 		self.mUpdateBuildTime = nil;
-- 	end
-- 	local view = transform:Find("GameObject/View")
-- 	if not IsNil(view) then
-- 		GameObject.Destroy(view.gameObject);
-- 	end
-- 	local viewF = transform:Find("F/View")
-- 	if not IsNil(viewF) then
-- 		GameObject.Destroy(viewF.gameObject);
-- 	end
-- 	local viewT = transform:Find("T/View")
-- 	if not IsNil(viewT) then
-- 		GameObject.Destroy(viewT.gameObject);
-- 	end
-- end

-- function ObjectView:SetName(go,info)
-- 	if info.type == 1 then
-- 		go.transform:Find("Image/Text"):GetComponent("InlineText").ttext = info.data.laird.playerName
-- 	elseif info.type == 2 then
-- 		-- LogError("info.data.build.endTime",info.data.build.endTime,type(info.data.build.endTime))
-- 		local ShowBuildTime = function() 
-- 			local s = ""
-- 			if info.data.build.endTime < (os.time() + LoginCtrl.mode.sliceTime) then
-- 				s = Res.building[info.data.build.buildId].name
-- 			else
-- 				local t = GetTimeLeft(info.data.build.endTime)
-- 				s = Res.building[info.data.build.buildId].name .. " " ..t[1]
-- 				if t[2] <= 0 then
-- 					if self.mUpdateBuildTime then
-- 						UpdateBeat:Remove(self.mUpdateBuildTime);
-- 						self.mUpdateBuildTime = nil;
-- 					end
-- 					s = Res.building[info.data.build.buildId].name
-- 				end
-- 			end
-- 			go.transform:Find("Image/Text"):GetComponent("InlineText").ttext = s
-- 		end
-- 		if info.data.build.endTime >= (os.time() + LoginCtrl.mode.sliceTime) then
-- 			if not self.mUpdateBuildTime then
-- 				self.mUpdateBuildTime = function() ShowBuildTime() end
-- 				UpdateBeat:Add(self.mUpdateBuildTime);
-- 			end
-- 		else
-- 			ShowBuildTime()
-- 		end
-- 	elseif info.type == 3 then
-- 		--空地没有名字
-- 	elseif info.type == 4 then
-- 		go.transform:Find("Image/Text"):GetComponent("InlineText").ttext = info.data.laird.playerName
-- 	elseif info.type == 5 then
-- 		go.transform:Find("Image/Text"):GetComponent("InlineText").ttext = info.data.monster.level
-- 	elseif info.type == 6 then
-- 		--没有关卡
-- 	elseif info.type == 7 then
-- 		go.transform:Find("Image/Text"):GetComponent("InlineText").ttext = info.name
-- 	elseif info.type == 8 then
-- 		go.transform:Find("Image/Text"):GetComponent("InlineText").ttext = info.data.laird.playerName
-- 	end
-- end

-- function ObjectView:GetInfo()
-- 	return self.mInfo;
-- end

-- function ObjectView:Dispose()
-- 	-- print("Dispose----------------------object view",self.mInfo.key);
-- 	self:Hide();
-- end

-- return ObjectView;